CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
View(data)
View(main_data)
View(main_raw_data)
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
enum_data <- prep_enumeration_data(COUNTRY)
View(enum_data)
enum_codebook <- gen_varbook_vec(enum_data)
enum_codebook
blocks_percluster <- prep_blocks_percluster(enum_data)
View(blocks_percluster)
businesses_percluster <- prep_businesses_percluster(enum_data, initial_sampled_blocks)
View(businesses_percluster)
businesses_perblock <- prep_businesses_perblock(enum_data, initial_sampled_blocks)
View(businesses_perblock)
weights_percluster <- prep_weights(businesses_percluster, blocks_percluster, COUNTRY, WEIGHT_PARAMS)
View(weights_percluster)
weights_cluster <- weights_percluster %>% select(Initial_block_ID, weight_cluster)
weight_msme <- weights_percluster %>% select(Initial_block_ID, weight_msme)
View(weight_msme)
get_main_data <- function(country, enum_data = NULL) {
filename <- glue("data/{country}/MSE_MAIN_{country}.sav")
data <- read_sav(filename) %>% mutate(country = country)
browser()
if (country %in% c("Brazil")) {
data %>%
mutate(
ID = paste(SbjNum, OutletID, sep = "-")
) %>%
left_join(enum_data %>% select(ID, BlockID, Initial_block_ID), by = c("ID")) -> data
} else if (country %in% c("Nigeria")) {
data %>%
mutate(
Initial_block_ID = ifelse(str_length(as.character(BlockID)) > 4, str_sub(as.character(BlockID), str_length(as.character(BlockID))-3), as.character(BlockID)),
Initial_block_ID = as.numeric(Initial_block_ID)
) -> data
} else if (country == "Ethiopia") {
data %>%
mutate(
Initial_block_ID = BlockID
) -> data
} else if (country %in% c("India")) {
data %>%
left_join(blockID_to_InitialID(enum_data), by = c("BlockID")) -> data
}
return(data)
}
main_raw_data <- get_main_data(COUNTRY, enum_data)
View(data)
names(data)
source("~/Documents/Github/cfi-map2-data/R/functions.R", echo=TRUE)
main_raw_data <- get_main_data(COUNTRY, enum_data)
View(main_raw_data)
main_codebook <- varbook_to_df(gen_varbook_vec(main_raw_data))
main_valuebook <- gen_valuebook(main_raw_data)
main_data <- prep_main_data(main_raw_data, weight_msme, COUNTRY) %>% filter(!is.na(weight_msme))
View(main_data)
main_data <- add_pca_todata(main_data)
#| include: false
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
View(main_data)
View(main_raw_data)
#| include: false
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/weights_out.R")
enum_data <- enum_data %>%
left_join(weights_cluster, by = c("Initial_block_ID")) %>%
mutate(fullsample = "All businesses")
# Add check that number of rows in main dataset = number of rows in raw dataset
View(main_raw_data)
View(main_data)
#| label: fig-fieldwork_map
#| echo: false
#| warning: false
#| fig-cap: "Geographic distribution of enumerated blocks"
#| cap-location: margin
library(sf)
library(raster)
# Read the TIFF raster image
raster_img <- get_raster(COUNTRY)
# Read the GeoJSON file
polygons <- get_sampling_grid(COUNTRY)
boundary <- get_boundary(polygons)
# Prepare block-level data
block_data <- businesses_perblock %>% select(BlockID, N_business_total_percluster) %>% mutate(BlockID = as.character(BlockID))
# Merging in number of enumerated businesses per block
if (COUNTRY %in% c("Alaska")) {
block_data <- businesses_perblock %>% select(BlockID, N_business_total_percluster) %>% mutate(BlockID = as.character(BlockID))
polygons <- left_join(polygons, block_data, by = join_by(block_id == BlockID)) %>%
filter(N_business_total_percluster >= 0)
map <- "fill"
} else {
block_data <- businesses_percluster %>% select(Initial_block_ID, N_business_total_percluster) %>% mutate(Initial_block_ID = as.character(Initial_block_ID))
polygons <- left_join(polygons, block_data, by = join_by(block_id == Initial_block_ID)) %>%
filter(N_business_total_percluster >= 0)
map <- "size"
}
fig_geo(boundary, polygons, raster_img, COUNTRY, map = map, color_opt = "rocket")
#| label: fig-nbus_size_and_sector
#| echo: false
#| warning: false
#| fig-cap: "Estimated business population by size and sector"
#| cap-location: margin
# Number of firms by size and sector
indicators <- c("business_total")
groups_l1 <- "business_size_agg2"
groups_l2 <- GROUPS[c("business_sector_agg3")]
ests <- compute_summary_clusterlevel_2g(indicators, groups_l1, groups_l2, enum_data, keep = "total")
fig_data <- total_businesses(ests)
title <- total_businesses_title(ests, fig_data)
labels <- list(
title = str_wrap(title, 80),
subtitle =  "Businesses (N)",
yax_ti = NULL,
xax_ti = NULL,
caption = SOURCE
)
figparams <- list(
geom_type = "bar", # One of "bar" or "tile"
bars = list(width = 0.8, position = "stack", labeltotal = TRUE, labeltotal_ndgy = TRUE,labeltotal_extendmax = TRUE, color = "white"),
valuelabels = list(show = TRUE, lab_vjust = 0.5, lab_hjust = 0.5, lab_face = "plain", lab_size = 3.5),
catlabels = list(show = FALSE),
errorbars = list(show = FALSE)
)
palette <- c("#41BBD9", "#CEE5F2", "#FF9F1C")
names(palette) <- c("Services: retail/wholesale trade (re-sale)", "Services: transportation, construction, repair, other", "Manufacturing")
scales <- list(
fillcolor = list(palette = palette),
yaxis = list(limits = c(0, 1), nbreaks = 5, type = "number", expand = c(0,0), droplines = FALSE)
)
legend <- list(
show = TRUE,
title = "Industrial sector",
nrows = 1,
ncols = 1,
reverse = TRUE
)
vars <- list(
xvar = "business_size_agg2", yvar = "total", fillvar = "group_cat_val"
)
fig_flex(fig_data, vars, facets = NULL, figparams, scales, legend, labels, coord_flip = TRUE)
#| include: false
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/weights_out.R")
enum_data <- enum_data %>%
left_join(weights_cluster, by = c("Initial_block_ID")) %>%
mutate(fullsample = "All businesses")
# Add check that number of rows in main dataset = number of rows in raw dataset
#| label: fig-mse_chars
#| echo: false
#| warning: false
#| fig-cap: "MSE sample characteristics"
#| cap-location: margin
indicators <- c("business_total")
groups <- GROUPS[c("business_size_agg2", "business_sector_agg3", "business_premise", "business_registration_status", "resp_owner_str", "resp_sex_str")]
ests <- compute_summary_mainlevel_1g(indicators, groups, data = main_data, weights = "weight_msme", psu = NULL, keep = "total")
attributes(main_raw_data$Q1)
#| include: false
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/weights_out.R")
enum_data <- enum_data %>%
left_join(weights_cluster, by = c("Initial_block_ID")) %>%
mutate(fullsample = "All businesses")
# Add check that number of rows in main dataset = number of rows in raw dataset
#| label: fig-mse_chars
#| echo: false
#| warning: false
#| fig-cap: "MSE sample characteristics"
#| cap-location: margin
indicators <- c("business_total")
groups <- GROUPS[c("business_size_agg2", "business_sector_agg3", "business_premise", "business_registration_status", "resp_owner_str", "resp_sex_str")]
ests <- compute_summary_mainlevel_1g(indicators, groups, data = main_data, weights = "weight_msme", psu = NULL, keep = "total")
attributes(main_raw_data$Q74)
#| include: false
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/weights_out.R")
enum_data <- enum_data %>%
left_join(weights_cluster, by = c("Initial_block_ID")) %>%
mutate(fullsample = "All businesses")
# Add check that number of rows in main dataset = number of rows in raw dataset
#| label: fig-mse_chars
#| echo: false
#| warning: false
#| fig-cap: "MSE sample characteristics"
#| cap-location: margin
indicators <- c("business_total")
groups <- GROUPS[c("business_size_agg2", "business_sector_agg3", "business_premise", "business_registration_status", "resp_owner_str", "resp_sex_str")]
ests <- compute_summary_mainlevel_1g(indicators, groups, data = main_data, weights = "weight_msme", psu = NULL, keep = "total")
fig_data <- sample_chars(ests, groups)
labels <- list(
title = "Characteristics of Micro and Small Enterprises (MSEs)* in study sample",
subtitle =  "MSEs (%)",
yax_ti = NULL,
xax_ti = NULL,
caption = paste(SOURCE, "Notes: MSEs correspond to businesses with 1-10 employees including the owner")
)
figparams <- list(
geom_type = "bar", # One of "bar" or "tile"
bars = list(width = 0.9, position = "stack", color = "white", labeltotal = FALSE),
valuelabels = list(show = TRUE, lab_hjust = 0.5, lab_vjust = 0.5, lab_face = "plain", lab_size = 3),
catlabels = list(show = FALSE),
errorbars = list(show = FALSE)
)
palette <- c("#A2C3A4", "#C4F1BE", "#FF9F1C", "#41BBD9", "#CEE5F2", "#BFD3C1", "#A2C3A4", "#C4F1BE", "#CEE5F2", "#FF7B9C", "#C4F1BE","#A2C3A4", "#CEE5F2", "#FF7B9C")
names(palette) <- unique(fig_data$group_cat_val)
scales <- list(
fillcolor = list(palette = palette),
yaxis = list(limits = c(0, 1), nbreaks = 5, type = "percent", expand = NULL, droplines = FALSE)
)
legend <- list(
show = FALSE,
title = NULL,
nrows = 1,
ncols = 1,
reverse = TRUE
)
vars <- list(
xvar = "group_name", yvar = "share", fillvar = "group_cat_val"
)
fig_flex(fig_data, vars, facets = NULL, figparams, scales, legend, labels, coord_flip = TRUE)
#| label: fig-mse_sector
#| echo: false
#| warning: false
#| fig-cap: "MSEs by sector of production"
#| cap-location: margin
indicators <- c("business_total")
groups <- GROUPS[c("business_sector_str")]
ests_all <- compute_summary_mainlevel_1g(indicators, groups, data = main_data, weights = "weight_msme", psu = NULL, keep = "total") %>% mutate(subgroup = "All businesses")
#| include: false
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Indonesia"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/weights_out.R")
enum_data <- enum_data %>%
left_join(weights_cluster, by = c("Initial_block_ID")) %>%
mutate(fullsample = "All businesses")
# Add check that number of rows in main dataset = number of rows in raw dataset
#| label: fig-mse_sector
#| echo: false
#| warning: false
#| fig-cap: "MSEs by sector of production"
#| cap-location: margin
indicators <- c("business_total")
groups <- GROUPS[c("business_sector_str")]
ests_all <- compute_summary_mainlevel_1g(indicators, groups, data = main_data, weights = "weight_msme", psu = NULL, keep = "total") %>% mutate(subgroup = "All businesses")
ests_men <- compute_summary_mainlevel_1g(indicators, groups, data = main_data %>% filter(resp_sex_men == 1), weights = "weight_msme", psu = NULL, keep = "total") %>% mutate(subgroup = "Men owned\nor managed")
ests_women <- compute_summary_mainlevel_1g(indicators, groups, data = main_data %>% filter(resp_sex_women == 1), weights = "weight_msme", psu = NULL, keep = "total")  %>% mutate(subgroup = "Women owned\nor managed")
fig_data <- sample_sector(bind_rows(ests_all, ests_men, ests_women), sector_agg0_to_agg3(main_data))
labels <- list(
title = "MSEs by sector of production",
subtitle =  "MSEs (%)",
yax_ti = NULL,
xax_ti = NULL,
caption = paste(SOURCE, "Notes: MSEs correspond to businesses with 1-10 employees including the owner")
)
figparams <- list(
geom_type = "bar", # One of "bar" or "tile"
bars = list(width = 0.9, position = "stack", color = "white", labeltotal = FALSE),
valuelabels = list(show = FALSE, lab_hjust = 0.5, lab_vjust = 0.5, lab_face = "plain", lab_size = 3),
catlabels = list(show = FALSE),
errorbars = list(show = FALSE)
)
palette <- c("#41BBD9", "#CEE5F2", "#FF9F1C")
names(palette) <- c("Services: trade (re-sale)", "Services: other (eg. transport, construction)", "Manufacturing")
maxy <- roundupN(max(fig_data$share, na.rm = TRUE))
scales <- list(
fillcolor = list(palette = palette),
yaxis = list(limits = c(0, maxy), nbreaks = 5, type = "percent", expand = NULL, droplines = FALSE)
)
legend <- list(
show = TRUE,
title = NULL,
nrows = 3,
ncols = 1,
reverse = TRUE
)
vars <- list(
xvar = "group_cat_val", yvar = "share", fillvar = "business_sector_agg3"
)
facets <- list(
type = "wrap",
rows = "subgroup",
cols = "subgroup",
nrows = 1,
ncols = 1,
scales = "fixed",
drop_row_label = FALSE,
drop_col_label = FALSE,
add_dividers = TRUE
)
fig_flex(fig_data, vars, facets = facets, figparams, scales, legend, labels, coord_flip = TRUE)
names(attributes(main_raw_data$Q2)$labels[main_raw_data$Q2])
class(names(attributes(main_raw_data$Q2)$labels[main_raw_data$Q2]))
rm(list = ls())
rm(list = ls())
rm(list = ls())
#| include: false
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/weights_out.R")
enum_data <- enum_data %>%
left_join(weights_cluster, by = c("Initial_block_ID")) %>%
mutate(fullsample = "All businesses")
# Add check that number of rows in main dataset = number of rows in raw dataset
#| label: fig-mse_sector
#| echo: false
#| warning: false
#| fig-cap: "MSEs by sector of production"
#| cap-location: margin
indicators <- c("business_total")
groups <- GROUPS[c("business_sector_str")]
ests_all <- compute_summary_mainlevel_1g(indicators, groups, data = main_data, weights = "weight_msme", psu = NULL, keep = "total") %>% mutate(subgroup = "All businesses")
class(main_raw_data$Q2)
attributes(main_raw_data$Q2)
#| include: false
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Preparing main interview data
source("R/0_main_data.R")
source("R/weights_out.R")
enum_data <- enum_data %>%
left_join(weights_cluster, by = c("Initial_block_ID")) %>%
mutate(fullsample = "All businesses")
# Add check that number of rows in main dataset = number of rows in raw dataset
#| label: fig-mse_sector
#| echo: false
#| warning: false
#| fig-cap: "MSEs by sector of production"
#| cap-location: margin
indicators <- c("business_total")
groups <- GROUPS[c("business_sector_str")]
ests_all <- compute_summary_mainlevel_1g(indicators, groups, data = main_data, weights = "weight_msme", psu = NULL, keep = "total") %>% mutate(subgroup = "All businesses")
test <- main_raw_data %>%
mutate(
business_sector_str = names(attributes(Q2)$labels[Q2])
)
View(test)
View(test %>% select(Q2, business_sector_str))
names(main_data)
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
# Importing packaegs, functions declaring globals
source("R/packages.R")
source("R/utils.R")
source("R/globals.R")
source("R/functions.R")
source("R/specific_functions.R") # Preparing specialized (non-generic) functions
source("R/viz_functions.R")
# Select country:
#COUNTRY <- params$country
COUNTRY <- "Brazil"
CITY <- CITIES[[COUNTRY]]
# Preparing enumeration data and weights
source("R/0_weights.R")
